class Solution {
public:
    #define ll long long
    int dfs(vector<vector<int>>&adj,vector<bool>&visit,vector<int>&humanInCar,int &s,int node, ll &ans){
        visit[node] = true;
        for(const auto &it : adj[node]){
            if(!visit[it]){
                humanInCar[node]+=dfs(adj,visit,humanInCar,s,it,ans);
            }
        }
        if(node>0){
            double res = (double)humanInCar[node]/s * 1.0;
            ans+=ceil(res);
        }
        return humanInCar[node];
    }
    long long minimumFuelCost(vector<vector<int>>& roads, int s) {
        ios_base::sync_with_stdio(false);
        cin.tie(nullptr);
        cout.tie(nullptr);
        int n = roads.size();
        vector<bool>visit(n+1,false);
        vector<int>humanInCar(n+1,1);
        vector<vector<int>>adj(n+1);
        ll ans = 0;
        for(auto &it : roads){
            adj[it[0]].push_back(it[1]);
            adj[it[1]].push_back(it[0]);
        }
        dfs(adj,visit,humanInCar,s,0,ans);
        return ans;
    }
};
